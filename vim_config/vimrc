" System vimrc file for MacVim
"
" Maintainer:	Bjorn Winckler <bjorn.winckler@gmail.com>
" Last Change:	Sat Aug 29 2009

set nocompatible

" The default for 'backspace' is very confusing to new users, so change it to a
" more sensible value.  Add "set backspace&" to your ~/.vimrc to reset it.
set backspace+=indent,eol,start

" Disable localized menus for now since only some items are translated (e.g.
" the entire MacVim menu is set up in a nib file which currently only is
" translated to English).
set langmenu=none

" Python2
" MacVim uses Homebrew python2 if installed, otherwise configured one
if exists("&pythondll") && exists("&pythonhome")
  if filereadable("/usr/local/Frameworks/Python.framework/Versions/2.7/Python")
    " Homebrew python 2.7
    set pythondll=/usr/local/Frameworks/Python.framework/Versions/2.7/Python
    set pythonhome=/usr/local/Frameworks/Python.framework/Versions/2.7
  endif
endif

" Python3
" MacVim uses Homebrew python3 if installed, next try to use python.org binary
if exists("&pythonthreedll") && exists("&pythonthreehome") &&
      \ !filereadable(&pythonthreedll)
  if filereadable("/Library/Frameworks/Python.framework/Versions/3.5/Python")
    " https://www.python.org/downloads/mac-osx/
    set pythonthreedll=/Library/Frameworks/Python.framework/Versions/3.5/Python
    set pythonthreehome=/Library/Frameworks/Python.framework/Versions/3.5
  endif
endif



""""""""""""""""""""""""""""""""

"  相关显示

""""""""""""""""""""""""""""""""

set nocompatible       "去掉vi一致性模式，避免以前版本的bug
set number             "显示行号
syntax enable
syntax on              "语法高亮
set foldenable         "允许折叠
set foldmethod=manual  "手动折叠“

"显示中文帮助

if version >= 603
  set helplang=cn
  set encoding=utf-8
endif

"设置颜色方案

colorscheme molokai  “molokai代表颜色方案的名字
set funcs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set encoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8

"""""""""""""""""""""""""""""""

"快捷键设置

"""""""""""""""""""""""""""""""
"快速打开模板-----------F10

map <F10> :call SetTitle()<CR>
func SetTitle()
	let l = 0
	let l = l + 1 | call setline(l,'#include <iostream>')
	let l = l + 1 | call setline(l,'#include <cstdio>')
	let l = l + 1 | call setline(l,'#include <cstring>')
	let l = l + 1 | call setline(l,'#include <algorithm>')
	let l = l + 1 | call setline(l,'#include <string>')
	let l = l + 1 | call setline(l,'#include <cmath>')
	let l = l + 1 | call setline(l,'#include <cstdlib>')
	let l = l + 1 | call setline(l,'#include <vector>')
	let l = l + 1 | call setline(l,'#include <queue>')
	let l = l + 1 | call setline(l,'#include <set>')
	let l = l + 1 | call setline(l,'#include <map>')
	let l = l + 1 | call setline(l,'')
	let l = l + 1 | call setline(l,'using namespace std;')
	let l = l + 1 | call setline(l,'')
	let l = l + 1 | call setline(l,'int main()')
	let l = l + 1 | call setline(l,'{')
	let l = l + 1 | call setline(l,'	//freopen("in.txt","r",stdin);')
	let l = l + 1 | call setline(l,'	//freopen("out.txt","w",stdout);')
	let l = l + 1 | call setline(l,'    ')
	let l = l + 1 | call setline(l,'    return 0;')
	let l = l + 1 | call setline(l,'}')
endfunc

"C,C++编译运行---------F5
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
  exec "w"
  if &filetype == 'c'
    exec "!g++ % -o %<"
    exec "! ./%<"
  elseif &filetype == 'cpp'
    exec "!g++ % -o %<"
    exec "! ./%<"
  elseif &filetype == 'java'
    exec "!javac %"
    exec "!java %<"
  elseif &filetype == 'sh'
    :! .%
  endif
	echo "———Done!————————"
endfunc

"ACM一键保存输入数据-----F6
map <F6> :call SaveInputData()<CR>
func! SaveInputData()
	exec "tabnew"
	exec 'normal "+gP'
	exec "w! /tmp/input_data"
endfunc

"ACM调用输入数据并编译运行-----F7
map <F7> :call ExecCPP()<CR>
func! ExecCPP()
	exec "w"
	exec "!g++ % -o /tmp/a"
	exec "!/tmp/a < /tmp/input_data"
endfunc

"C,C++调试------------F8
map <F8> :call Rungdb()<CR>
func! Rungdb()
  exec "w"
  exec "!g++ % -g -o %<"
  exec "!gdb ./%<"
endfunc


""""""""""""""""""""""""""""""

"   实用设置

""""""""""""""""""""""""""""""

set smartindent						"智能对齐
set showmatch						"自动补齐括号等

set autoindent								
set cindent							"自动缩进
set confirm							"处理未保存或只读文件时，弹出确认
set completeopt =preview,menu		"代码补全
:set makeprg=g++ -wall %			"关闭警告后运行
set tabstop =4
set softtabstop=4
set shiftwidth=4
set noexpandtab/expandtab			"Tab键的宽度

"自动补全,()不补全，感觉自己很容易习惯打上后括号



:inoremap { {<CR>}<ESC>O

:inoremap } <c-r>=ClosePair('}')<CR>

:inoremap [ []<ESC>i

:inoremap ] <c-r>=ClosePair(']')<CR>

"":inoremap " ""<ESC>i

"":inoremap ' ''<ESC>i

if getline('.')[col('.') - 1] == a:char
    return "\<Right>"
else
    return a:char
endif

filetype plugin indent on

"打开文件类型检测, 加了这句才可以用智能补全

set completeopt=longest,menu
